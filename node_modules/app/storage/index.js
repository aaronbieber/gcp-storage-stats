const storage = require('@google-cloud/storage')();
const secrets = require('app/secrets')();
const filesize = require('filesize');
const twilio = require('twilio')(
  secrets.twilio_account_sid,
  secrets.twilio_auth_token
);

var formatMessage = (data) => {
  return 'GCS contains '
    + data.totals.files.toLocaleString()
    + ' files, totaling '
    + data.totals.size + '.';
};

module.exports.sendMessage = (data) => {
  return new Promise((resolve, reject) => {
    twilio.messages.create({
      to: secrets.my_number,
      from: secrets.twilio_number,
      body: formatMessage(data)
    }).then((message) => {
      resolve(message.sid);
    }).catch((err) => {
      console.log(err);
    });
  });
};

module.exports.storageList = () => {
  return new Promise((resolve, reject) => {
    var returnMessage = '';
    var bucketData = [];

    console.log('Retrieving buckets...');
    storage.getBuckets().then((data) => {
      var buckets = data[0];

      console.log('Buckets retrieved. Reading files...');
      var bucketReaders = buckets.map((bucket) => {
        return new Promise((resolve, reject) => {
          console.log('Streaming files for ' + bucket.name + '...');
          var files = 0;
          var size = 0;
          var lastLogged = 0;
          var bucketNode = {
            name: bucket.name,
            files: 0,
            size: 0
          };

          bucket.getFilesStream()
            .on('data', (file) => {
              files += 1;
              size += file.metadata.size * 1;
              if (files - lastLogged > 1000) {
                lastLogged = files;
                console.log(bucket.name + ': ' + files);
              }
            })
            .on('end', () => {
              bucketNode['files'] = files;
              bucketNode['size'] = size;
              console.log('Completed ' + bucketNode.name + ':');
              console.log(bucketNode);
              resolve(bucketNode);
            });
        });
      });

      return Promise.all(bucketReaders);
    }).then((data) => {
      var totals = data.reduce((acc, b) => {
        acc.files += b.files;
        acc.size += b.size;
        return acc;
      }, {files: 0, size: 0});

      totals.size = filesize(totals.size);

      resolve({
        totals: totals,
        buckets: data
      });
    }).catch((e) => {
      console.log(e);
    });
  });
};
